# ------------------------------
# Part IV: Prediction Accuacy!
# ------------------------------
# Calculate predictions for each model for heart_test
# FFTrees testing decisions
FFTrees_pred <- predict(FFTrees_model, heart_test)
# Regression testing decisions
#  Positive values are predicted to be 1, negative values are 0
glm_pred <- predict(glm_model, heart_test) >= 0
# randomForest testing decisions
randomForest_pred <- predict(randomForest_model, heart_test_fac)
# Now calculate testing accuracies and put in dataframe
# Truth value for test data is heart_test$sex
test_truth <- heart_test$sex
testing_results <- data_frame(FFTrees = mean(FFTrees_pred == test_truth),
glm = mean(glm_pred == test_truth),
randomForest = mean(randomForest_pred == test_truth))
# Plot testing results
barplot(height = unlist(testing_results),
main = "Testing Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
library(e1071)          # for svm()
library(randomForest)   # for randomForest()
library(rpart)          # for rpart()
library(yarrr)          # for pirateplot()
library(tidyverse)      # for datawrangling and ggplot2
library(FFTrees)        # for the heartdisease data
heartdisease
heart <- heartdisease   # Save a copy of the heartdisease data as heart
set.seed(101)   # To fix the training / test randomization
# Randomly sort rows
heart <- heart %>%
arrange(rnorm(nrow(heart)))
# Savew first 125 rows as heart_train and remaining as heart_test
heart_train <- heart %>% slice(1:100)
heart_test <- heart %>% slice(101:nrow(heart))
heart <- heartdisease   # Save a copy of the heartdisease data as heart
set.seed(101)   # To fix the training / test randomization
# Randomly sort rows
heart <- heart %>%
arrange(rnorm(nrow(heart)))
# Savew first 125 rows as heart_train and remaining as heart_test
heart_train <- heart %>% slice(1:100)
heart_test <- heart %>% slice(101:nrow(heart))
# Create heart_train_fact, heart_test_fact
#  Just heart_train and hear_test with factors
#  We're only doing this because the randomForest() function
#   requires factors!!!!
heart_train_fac <- heart_train
heart_test_fac <- heart_test
for(i in 1:ncol(heart_train_fac)) {  # Convert character columns and diagnosis to factor
if(class(heart_train_fac[[i]]) == "character") {
heart_train_fac[[i]] <- factor(heart_train_fac[[i]])
heart_test_fac[[i]] <- factor(heart_test_fac[[i]])
}}
print(heart_train)
heart_test
# Build FFTrees_model
FFTrees_model <- FFTrees(formula = sex ~ .,
data = heart_train)
# Build glm_model
glm_model <- glm(formula = factor(sex) ~ .,
data = heart_train,
family = "binomial")  # For predicting a binary variable
# Build randomForest model
randomForest_model <- randomForest(formula = factor(sex) ~ .,
data = heart_train_fac)
FFTrees_model
glm_model
randomForest_model
# FFTrees training decisions
FFTrees_fit <- predict(FFTrees_model, heart_train)
# Regression training decisions
#  Positive values are predicted to be 1, negative values are 0
glm_fit <- predict(glm_model, heart_train) > 0
# randomForest training decisions
randomForest_fit <- predict(randomForest_model, heart_train_fac)
FFTrees_fit
randomForest_fit
glm_fit
train_truth <- heart_train$sex
train_truth
# Put training results together
training_results <- data_frame(FFTrees = mean(FFTrees_fit == train_truth),
glm = mean(glm_fit == train_truth),
randomForest = mean(randomForest_fit == train_truth))
# Plot training results
barplot(height = unlist(training_results),
main = "Training Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
# FFTrees testing decisions
FFTrees_pred <- predict(FFTrees_model, heart_test)
# Regression testing decisions
#  Positive values are predicted to be 1, negative values are 0
glm_pred <- predict(glm_model, heart_test) >= 0
predict(glm_model, heart_test)
predict(glm_model, heart_test) >= 0
# randomForest testing decisions
randomForest_pred <- predict(randomForest_model, heart_test_fac)
test_truth <- heart_test$sex
testing_results <- data_frame(FFTrees = mean(FFTrees_pred == test_truth),
glm = mean(glm_pred == test_truth),
randomForest = mean(randomForest_pred == test_truth))
# Plot testing results
barplot(height = unlist(testing_results),
main = "Testing Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
heart_train
# Savew first 125 rows as heart_train and remaining as heart_test
heart_train <- heart %>% slice(1:200)
heart_test <- heart %>% slice(201:nrow(heart))
# Create heart_train_fact, heart_test_fact
#  Just heart_train and hear_test with factors
#  We're only doing this because the randomForest() function
#   requires factors!!!!
heart_train_fac <- heart_train
heart_test_fac <- heart_test
for(i in 1:ncol(heart_train_fac)) {  # Convert character columns and diagnosis to factor
if(class(heart_train_fac[[i]]) == "character") {
heart_train_fac[[i]] <- factor(heart_train_fac[[i]])
heart_test_fac[[i]] <- factor(heart_test_fac[[i]])
}}
# ------------------------------
# Part I: Build Models
# ------------------------------
# Build FFTrees_model
FFTrees_model <- FFTrees(formula = sex ~ .,
data = heart_train)
# Build glm_model
glm_model <- glm(formula = factor(sex) ~ .,
data = heart_train,
family = "binomial")  # For predicting a binary variable
# Build randomForest model
randomForest_model <- randomForest(formula = factor(sex) ~ .,
data = heart_train_fac)
# ------------------------------
# Part II: Explore Models
# ------------------------------
print(FFTrees_model)
summary(FFTrees_model)
print(glm_model)
summary(glm_model)
print(randomForest_model)
summary(randomForest_model)
# ------------------------------
# Part III: Training Accuracy
# ------------------------------
# FFTrees training decisions
FFTrees_fit <- predict(FFTrees_model, heart_train)
# Regression training decisions
#  Positive values are predicted to be 1, negative values are 0
glm_fit <- predict(glm_model, heart_train) > 0
# randomForest training decisions
randomForest_fit <- predict(randomForest_model, heart_train_fac)
# Now calculate fitting accuracies and put in dataframe
# Truth value for training data is heart_train$sex
train_truth <- heart_train$sex
# Put training results together
training_results <- data_frame(FFTrees = mean(FFTrees_fit == train_truth),
glm = mean(glm_fit == train_truth),
randomForest = mean(randomForest_fit == train_truth))
# Plot training results
barplot(height = unlist(training_results),
main = "Training Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
# ------------------------------
# Part IV: Prediction Accuacy!
# ------------------------------
# Calculate predictions for each model for heart_test
# FFTrees testing decisions
FFTrees_pred <- predict(FFTrees_model, heart_test)
# Regression testing decisions
#  Positive values are predicted to be 1, negative values are 0
glm_pred <- predict(glm_model, heart_test) >= 0
# randomForest testing decisions
randomForest_pred <- predict(randomForest_model, heart_test_fac)
# Now calculate testing accuracies and put in dataframe
# Truth value for test data is heart_test$sex
test_truth <- heart_test$sex
testing_results <- data_frame(FFTrees = mean(FFTrees_pred == test_truth),
glm = mean(glm_pred == test_truth),
randomForest = mean(randomForest_pred == test_truth))
# Plot testing results
barplot(height = unlist(testing_results),
main = "Testing Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
# Savew first 125 rows as heart_train and remaining as heart_test
heart_train <- heart %>% slice(1:200)
heart_test <- heart %>% slice(201:nrow(heart))
# Create heart_train_fact, heart_test_fact
#  Just heart_train and hear_test with factors
#  We're only doing this because the randomForest() function
#   requires factors!!!!
heart_train_fac <- heart_train
heart_test_fac <- heart_test
for(i in 1:ncol(heart_train_fac)) {  # Convert character columns and diagnosis to factor
if(class(heart_train_fac[[i]]) == "character") {
heart_train_fac[[i]] <- factor(heart_train_fac[[i]])
heart_test_fac[[i]] <- factor(heart_test_fac[[i]])
}}
# ------------------------------
# Part I: Build Models
# ------------------------------
# Build FFTrees_model
FFTrees_model <- FFTrees(formula = sex ~ .,
data = heart_train)
# Build glm_model
glm_model <- glm(formula = factor(sex) ~ .,
data = heart_train,
family = "binomial")  # For predicting a binary variable
# Build randomForest model
randomForest_model <- randomForest(formula = factor(sex) ~ .,
data = heart_train_fac)
# ------------------------------
# Part II: Explore Models
# ------------------------------
print(FFTrees_model)
summary(FFTrees_model)
print(glm_model)
summary(glm_model)
print(randomForest_model)
summary(randomForest_model)
# ------------------------------
# Part III: Training Accuracy
# ------------------------------
# FFTrees training decisions
FFTrees_fit <- predict(FFTrees_model, heart_train)
# Regression training decisions
#  Positive values are predicted to be 1, negative values are 0
glm_fit <- predict(glm_model, heart_train) > 0
# randomForest training decisions
randomForest_fit <- predict(randomForest_model, heart_train_fac)
# Now calculate fitting accuracies and put in dataframe
# Truth value for training data is heart_train$sex
train_truth <- heart_train$sex
# Put training results together
training_results <- data_frame(FFTrees = mean(FFTrees_fit == train_truth),
glm = mean(glm_fit == train_truth),
randomForest = mean(randomForest_fit == train_truth))
# Plot training results
barplot(height = unlist(training_results),
main = "Training Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
# ------------------------------
# Part IV: Prediction Accuacy!
# ------------------------------
# Calculate predictions for each model for heart_test
# FFTrees testing decisions
FFTrees_pred <- predict(FFTrees_model, heart_test)
# Regression testing decisions
#  Positive values are predicted to be 1, negative values are 0
glm_pred <- predict(glm_model, heart_test) >= 0
# randomForest testing decisions
randomForest_pred <- predict(randomForest_model, heart_test_fac)
# Now calculate testing accuracies and put in dataframe
# Truth value for test data is heart_test$sex
test_truth <- heart_test$sex
testing_results <- data_frame(FFTrees = mean(FFTrees_pred == test_truth),
glm = mean(glm_pred == test_truth),
randomForest = mean(randomForest_pred == test_truth))
# Plot testing results
barplot(height = unlist(testing_results),
main = "Testing Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
# Savew first 125 rows as heart_train and remaining as heart_test
heart_train <- heart %>% slice(1:200)
heart_test <- heart %>% slice(201:nrow(heart))
# Create heart_train_fact, heart_test_fact
#  Just heart_train and hear_test with factors
#  We're only doing this because the randomForest() function
#   requires factors!!!!
heart_train_fac <- heart_train
heart_test_fac <- heart_test
for(i in 1:ncol(heart_train_fac)) {  # Convert character columns and diagnosis to factor
if(class(heart_train_fac[[i]]) == "character") {
heart_train_fac[[i]] <- factor(heart_train_fac[[i]])
heart_test_fac[[i]] <- factor(heart_test_fac[[i]])
}}
# ------------------------------
# Part I: Build Models
# ------------------------------
# Build FFTrees_model
FFTrees_model <- FFTrees(formula = sex ~ .,
data = heart_train)
# Build glm_model
glm_model <- glm(formula = factor(sex) ~ .,
data = heart_train,
family = "binomial")  # For predicting a binary variable
# Build randomForest model
randomForest_model <- randomForest(formula = factor(sex) ~ .,
data = heart_train_fac)
# ------------------------------
# Part II: Explore Models
# ------------------------------
print(FFTrees_model)
summary(FFTrees_model)
print(glm_model)
summary(glm_model)
print(randomForest_model)
summary(randomForest_model)
# ------------------------------
# Part III: Training Accuracy
# ------------------------------
# FFTrees training decisions
FFTrees_fit <- predict(FFTrees_model, heart_train)
# Regression training decisions
#  Positive values are predicted to be 1, negative values are 0
glm_fit <- predict(glm_model, heart_train) > 0
# randomForest training decisions
randomForest_fit <- predict(randomForest_model, heart_train_fac)
# Now calculate fitting accuracies and put in dataframe
# Truth value for training data is heart_train$sex
train_truth <- heart_train$sex
# Put training results together
training_results <- data_frame(FFTrees = mean(FFTrees_fit == train_truth),
glm = mean(glm_fit == train_truth),
randomForest = mean(randomForest_fit == train_truth))
# Plot training results
barplot(height = unlist(training_results),
main = "Training Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
# ------------------------------
# Part IV: Prediction Accuacy!
# ------------------------------
# Calculate predictions for each model for heart_test
# FFTrees testing decisions
FFTrees_pred <- predict(FFTrees_model, heart_test)
# Regression testing decisions
#  Positive values are predicted to be 1, negative values are 0
glm_pred <- predict(glm_model, heart_test) >= 0
# randomForest testing decisions
randomForest_pred <- predict(randomForest_model, heart_test_fac)
# Now calculate testing accuracies and put in dataframe
# Truth value for test data is heart_test$sex
test_truth <- heart_test$sex
testing_results <- data_frame(FFTrees = mean(FFTrees_pred == test_truth),
glm = mean(glm_pred == test_truth),
randomForest = mean(randomForest_pred == test_truth))
# Plot testing results
barplot(height = unlist(testing_results),
main = "Testing Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
# Savew first 125 rows as heart_train and remaining as heart_test
heart_train <- heart %>% slice(1:200)
heart_test <- heart %>% slice(201:nrow(heart))
# Create heart_train_fact, heart_test_fact
#  Just heart_train and hear_test with factors
#  We're only doing this because the randomForest() function
#   requires factors!!!!
heart_train_fac <- heart_train
heart_test_fac <- heart_test
for(i in 1:ncol(heart_train_fac)) {  # Convert character columns and diagnosis to factor
if(class(heart_train_fac[[i]]) == "character") {
heart_train_fac[[i]] <- factor(heart_train_fac[[i]])
heart_test_fac[[i]] <- factor(heart_test_fac[[i]])
}}
# ------------------------------
# Part I: Build Models
# ------------------------------
# Build FFTrees_model
FFTrees_model <- FFTrees(formula = sex ~ .,
data = heart_train)
# Build glm_model
glm_model <- glm(formula = factor(sex) ~ .,
data = heart_train,
family = "binomial")  # For predicting a binary variable
# Build randomForest model
randomForest_model <- randomForest(formula = factor(sex) ~ .,
data = heart_train_fac)
# ------------------------------
# Part II: Explore Models
# ------------------------------
print(FFTrees_model)
summary(FFTrees_model)
print(glm_model)
summary(glm_model)
print(randomForest_model)
summary(randomForest_model)
# ------------------------------
# Part III: Training Accuracy
# ------------------------------
# FFTrees training decisions
FFTrees_fit <- predict(FFTrees_model, heart_train)
# Regression training decisions
#  Positive values are predicted to be 1, negative values are 0
glm_fit <- predict(glm_model, heart_train) > 0
# randomForest training decisions
randomForest_fit <- predict(randomForest_model, heart_train_fac)
# Now calculate fitting accuracies and put in dataframe
# Truth value for training data is heart_train$sex
train_truth <- heart_train$sex
# Put training results together
training_results <- data_frame(FFTrees = mean(FFTrees_fit == train_truth),
glm = mean(glm_fit == train_truth),
randomForest = mean(randomForest_fit == train_truth))
# Plot training results
barplot(height = unlist(training_results),
main = "Training Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
# ------------------------------
# Part IV: Prediction Accuacy!
# ------------------------------
# Calculate predictions for each model for heart_test
# FFTrees testing decisions
FFTrees_pred <- predict(FFTrees_model, heart_test)
# Regression testing decisions
#  Positive values are predicted to be 1, negative values are 0
glm_pred <- predict(glm_model, heart_test) >= 0
# randomForest testing decisions
randomForest_pred <- predict(randomForest_model, heart_test_fac)
# Now calculate testing accuracies and put in dataframe
# Truth value for test data is heart_test$sex
test_truth <- heart_test$sex
testing_results <- data_frame(FFTrees = mean(FFTrees_pred == test_truth),
glm = mean(glm_pred == test_truth),
randomForest = mean(randomForest_pred == test_truth))
# Plot testing results
barplot(height = unlist(testing_results),
main = "Testing Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
# Savew first 125 rows as heart_train and remaining as heart_test
heart_train <- heart %>% slice(1:100)
heart_test <- heart %>% slice(101:nrow(heart))
# Create heart_train_fact, heart_test_fact
#  Just heart_train and hear_test with factors
#  We're only doing this because the randomForest() function
#   requires factors!!!!
heart_train_fac <- heart_train
heart_test_fac <- heart_test
for(i in 1:ncol(heart_train_fac)) {  # Convert character columns and diagnosis to factor
if(class(heart_train_fac[[i]]) == "character") {
heart_train_fac[[i]] <- factor(heart_train_fac[[i]])
heart_test_fac[[i]] <- factor(heart_test_fac[[i]])
}}
# ------------------------------
# Part I: Build Models
# ------------------------------
# Build FFTrees_model
FFTrees_model <- FFTrees(formula = sex ~ .,
data = heart_train)
# Build glm_model
glm_model <- glm(formula = factor(sex) ~ .,
data = heart_train,
family = "binomial")  # For predicting a binary variable
# Build randomForest model
randomForest_model <- randomForest(formula = factor(sex) ~ .,
data = heart_train_fac)
# ------------------------------
# Part II: Explore Models
# ------------------------------
print(FFTrees_model)
summary(FFTrees_model)
print(glm_model)
summary(glm_model)
print(randomForest_model)
summary(randomForest_model)
# ------------------------------
# Part III: Training Accuracy
# ------------------------------
# FFTrees training decisions
FFTrees_fit <- predict(FFTrees_model, heart_train)
# Regression training decisions
#  Positive values are predicted to be 1, negative values are 0
glm_fit <- predict(glm_model, heart_train) > 0
# randomForest training decisions
randomForest_fit <- predict(randomForest_model, heart_train_fac)
# Now calculate fitting accuracies and put in dataframe
# Truth value for training data is heart_train$sex
train_truth <- heart_train$sex
# Put training results together
training_results <- data_frame(FFTrees = mean(FFTrees_fit == train_truth),
glm = mean(glm_fit == train_truth),
randomForest = mean(randomForest_fit == train_truth))
# Plot training results
barplot(height = unlist(training_results),
main = "Training Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
# ------------------------------
# Part IV: Prediction Accuacy!
# ------------------------------
# Calculate predictions for each model for heart_test
# FFTrees testing decisions
FFTrees_pred <- predict(FFTrees_model, heart_test)
# Regression testing decisions
#  Positive values are predicted to be 1, negative values are 0
glm_pred <- predict(glm_model, heart_test) >= 0
# randomForest testing decisions
randomForest_pred <- predict(randomForest_model, heart_test_fac)
# Now calculate testing accuracies and put in dataframe
# Truth value for test data is heart_test$sex
test_truth <- heart_test$sex
testing_results <- data_frame(FFTrees = mean(FFTrees_pred == test_truth),
glm = mean(glm_pred == test_truth),
randomForest = mean(randomForest_pred == test_truth))
# Plot testing results
barplot(height = unlist(testing_results),
main = "Testing Results",
ylim = c(0, 1),
col = c("palegreen3", "wheat2", "orchid3"))
rmarkdown::render("slides/D1S0_Intro/Intro.Rmd", output_format = "html_document")
